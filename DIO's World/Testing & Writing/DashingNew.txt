def DioDashingNew():
    global xd
    global is_dash
    global vel_d
    global mass_d
    global F_orce
    global cooldown_dash
    global current_frame
    global dash_frame_0
    global dash_frame_1
    global dash_frame_2
    global dash_frame_3

    friction = 1

    if is_dash == False:
        if keys[pygame.K_RIGHT] or keys[pygame.K_LEFT] and cooldown_dash == 0:
            is_dash = True
            
  
    if is_dash == True:
        #Force F = 1 / 2 * mass * velocity ^ 2.
        F_orce = friction * mass_d *(vel_d**2)


        if direction == "Right":
            xd += F_orce
        elif direction == "Left":
            xd -= F_orce

        vel_d = vel_d - 1

        if vel_d<0:
            is_jump = False
            vel_d = 12
            mass_d = 1
            cooldown_dash = 50

        if vel_d >= 10 and vel_d < 12:
            current_frame = dash_frame_0
        
        if vel_d >= 8 and movecount < 10:
            current_frame = dash_frame_1
          
        if vel_d >= 6 and vel_d < 8:
            current_frame = dash_frame_2

        if vel_d >= 4 and vel_d < 6:
            current_frame = dash_frame_3
  
        if vel_d >=2  and vel_d < 4:
            current_frame = dash_frame_2
     
        if vel_d >= 1 and vel_d < 2:
            current_frame = dash_frame_1

        if vel_d == 0:
            current_frame = dash_frame_0
            
        pygame.time.delay(10)